#!/usr/bin/env bash
fasta=''
idfile=''
mode=d
intype='stdin'
searchstr=''
linewidth='70'

while :; do
    case "$1" in
        -h|--help)   # display a synopsis, then exit.
			printf "Usage: getseq FILE1 [STRING [OPTIONS [FILE2]]]
	
Prints the entries from a multiFASTA file which contain a string.

FILE1              A multifasta file.

STRING             The string used to search the FASTA entries in FILE1.

-d (--description) Searches the description line of each fasta entry for the 
                   inputted string(s). This is the default mode if no option is 
                   given.

-s (--sequence)    Searches the sequence of each fasta entry for the 
                   inputted string(s).

-f (--fileinput)   Takes a file (FILE2) as an option argument. Each line of
                   FILE2 will be used as a search string.

-w (--linewidth)   Takes an integer number as an option argument. Sets the 
                   width of sequence lines in the output fasta entries. Default 
                   value is 70.

If no STRING is given or if -f is not used, stdin is read to provide the search strings.\n"
            exit
            ;;

        -d|--description)
            mode=d
            ;;

        -s|--sequence)
            mode=s
            ;;

        -f|--fileinput)
            if [ -n "$2" ]; then
                if [ -f "$2" ]; then
                    idfile="$2"
                    intype='file'
                    shift
                else
                    printf "ERROR: $1 requires a valid file as an argument.\n" >&2
                    exit 1
                fi
            else
                printf "ERROR: $1 requires a non-empty option argument.\n" >&2
                exit 1
            fi
            ;;

        -w|--linewidth)
            if [ -n "$2" ]; then
                if [[ "$2" =~ ^[0-9]+$ ]]; then
                    linewidth="$2"
                    shift
                else
                    printf "ERROR: $1 requires a positive integer as an argument.\n" >&2
                    exit 1
                fi
            else
                printf "ERROR: $1 requires a non-empty option argument.\n" >&2
                exit 1
            fi
            ;;

        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;

        *)    # Default case: If a file: ingest it, if no more options: break out of the loop.
            if [[ $# == 0 ]]; then
                break   
            else
                if [ -f "$1" ]; then
                    if [ ! -z "$fasta" ]; then
                        printf 'Error: more than one file parameter.\n' >&2
                        exit 1
                    else
                        fasta="$1"
                    fi

                else
                    if [ ! -z "$searchstr" ]; then
                        printf 'Error: more than one string parameter.\n' >&2
                        exit 1
                    else
                        searchstr="$1"
                        intype='string'
                    fi
                fi 
            fi
            ;;
    esac
    shift
done


searchdesc() {
gawk '
BEGIN {RS=">"; FS="\n"; width='$3'}
{
	if (ARGIND == 1){
		seq =""
		for (i=2;i<=NF;i++) {
            seq = seq $i
		}
		fasta_arr[$1]=seq
	}
}
ENDFILE{ if(ARGIND == 1){RS="\n";FS="|"}}
{
	if (ARGIND > 1){
		for (desc in fasta_arr) {
			if (desc ~ $0) {
				print ">" desc
				while(length(fasta_arr[desc]) > width) {
					print substr(fasta_arr[desc],1,width)
					fasta_arr[desc]= substr(fasta_arr[desc],width+1,length(fasta_arr[desc]))
				}
				print fasta_arr[desc]
			}
        }
	}
}
' "$1" "$2"
}


searchseq() {
gawk '
BEGIN {RS=">"; FS="\n"; width='$3'}
{
    if (ARGIND == 1){
        seq =""
        for (i=2;i<=NF;i++) {
            seq = seq $i
        }
        fasta_arr[$1]=seq
    }
}
ENDFILE{ if(ARGIND == 1){RS="\n";FS="|"}}
{
    if (ARGIND > 1){
        for (desc in fasta_arr) {
            if (fasta_arr[desc] ~ $0) {
                print ">" desc
                while(length(fasta_arr[desc]) > width) {
                    print substr(fasta_arr[desc],1,width)
                    fasta_arr[desc]= substr(fasta_arr[desc],width+1,length(fasta_arr[desc]))
                }
                print fasta_arr[desc]
            }
        }
    }
}
' "$1" "$2"
}


if [[ "$intype" == 'stdin' ]]; then

	if [[ "$mode" == 'd' ]]; then
		searchdesc "$fasta" '-' "$linewidth"

	elif [[ "$mode" == 's' ]]; then
		searchseq "$fasta" '-' "$linewidth"

	fi

elif [[ "$intype" == 'file' ]]; then

	if [[ "$mode" == 'd' ]]; then
		searchdesc "$fasta" "$idfile" "$linewidth"

	elif [[ "$mode" == 's' ]]; then
		searchseq "$fasta" "$idfile" "$linewidth"

	fi

elif [[ "$intype" == 'string' ]]; then

	if [[ "$mode" == 'd' ]]; then
		echo "$searchstr" | searchdesc "$fasta" '-' "$linewidth"

	elif [[ "$mode" == 's' ]]; then
		echo "$searchstr" | searchseq "$fasta" '-' "$linewidth"

	fi

fi

exit
